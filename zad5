package com.company;

public class Main {

    static void bubbleSort(int array[]) {
        int size = array.length;
        for (int i = 0; i < (size-1); i++) {
            boolean swapped = false;
            for (int j = 0; j < (size-i-1); j++) {
                if (array[j] > array[j + 1]) {
                    int temp = array[j];
                    array[j] = array[j + 1];
                    array[j + 1] = temp;
                    swapped = true;
                }
            }
            if (!swapped)
                break;
        }
    }
    static void selectionSort(int array[]) {
        int size = array.length;
        for (int step = 0; step < size - 1; step++) {
            int min_idx = step;
            for (int i = step + 1; i < size; i++) {
                if (array[i] < array[min_idx]) {
                    min_idx = i;
                }
            }
            int temp = array[step];
            array[step] = array[min_idx];
            array[min_idx] = temp;
        }
    }
    static void merge(int arr[], int p, int q, int r) {
        int n1 = q - p + 1;
        int n2 = r - q;
        int L[] = new int[n1];
        int M[] = new int[n2];
        for (int i = 0; i < n1; i++)
            L[i] = arr[p + i];
        for (int j = 0; j < n2; j++)
            M[j] = arr[q + 1 + j];
        int i, j, k;
        i = 0;
        j = 0;
        k = p;
        while (i < n1 && j < n2) {
            if (L[i] <= M[j]) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = M[j];
                j++;
            }
            k++;
        }
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }
        while (j < n2) {
            arr[k] = M[j];
            j++;
            k++;
        }
    }
    static void mergeSort(int arr[], int l, int r) {
        if (l < r) {
            int m = (l + r) / 2;
            mergeSort(arr, l, m);
            mergeSort(arr, m + 1, r);
            merge(arr, l, m, r);
        }
    }
    static int partition(int array[], int low, int high) {
        int pivot = array[high];
        int i = (low - 1);
        for (int j = low; j < high; j++) {
            if (array[j] <= pivot) {
                i++;
                int temp = array[i];
                array[i] = array[j];
                array[j] = temp;
            }
        }
        int temp = array[i + 1];
        array[i + 1] = array[high];
        array[high] = temp;
        return (i + 1);
    }
    static void quickSort(int array[], int low, int high) {
        if (low < high) {
            int pi = partition(array, low, high);
            quickSort(array, low, pi - 1);
            quickSort(array, pi + 1, high);
        }
    }
    public static void main(String args[]) {
        // generating array
        int array_len = 20000;
        int[] array = new int[array_len];
        for (int i = 0; i < array_len; i++) {
            array[i] = (int) (1000.0 * Math.random() / (Math.random() + Math.random()));
        }
        long time_start, time_finish;


        int[] data1 = array.clone();
        time_start = System.currentTimeMillis();
        bubbleSort(data1);
        time_finish = System.currentTimeMillis();
        System.out.println("Time Bubble: " + (double) (time_finish-time_start) / 1000);


        int[] data2 = array.clone();
        time_start = System.currentTimeMillis();
        selectionSort(data2);
        time_finish = System.currentTimeMillis();
        System.out.println("Time Selection: " + (double) (time_finish-time_start) / 1000);


        int[] data3 = array.clone();
        time_start = System.currentTimeMillis();
        mergeSort(data3, 0, data3.length - 1);
        time_finish = System.currentTimeMillis();
        System.out.println("Time Merge: " + (double) (time_finish-time_start) / 1000);


        int[] data4 = array.clone();
        time_start = System.currentTimeMillis();
        quickSort(data4, 0, data4.length - 1);
        time_finish = System.currentTimeMillis();
        System.out.println("Time Quick:" + (double) (time_finish-time_start) / 1000);
    }
}
